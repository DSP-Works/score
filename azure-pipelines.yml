trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr:
  - '*'

variables:
  isGitTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  gitTag: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]
  gitTagNoV: $[replace(replace(variables['Build.SourceBranch'], 'refs/tags/v', ''), '/', '')]

stages:
  - stage: Build
    jobs:
      - job: Win32
        displayName: Win32
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: recursive

        - bash: |
            source ci/win32.deps.sh

        - script: |
            call ci/win32.build.cmd

        - bash: |
            source ci/win32.deploy.sh

          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.ArtifactStagingDirectory)/ossia score-$(gitTagNoV)-win64.exe"
            artifactName: Installer

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.ArtifactStagingDirectory)/windows-sdk.zip"
            artifactName: SDK

        - task: GitHubRelease@1
          condition: and(succeeded(), eq(variables.isGitTag, true))
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/score
            action: 'edit'
            target: '$(Build.SourceVersion)'
            tag: '$(gitTag)'
            tagSource: manual
            title: '$(gitTag)'
            assetUploadMode: 'replace'


      - job: Ubuntu
        displayName: Ubuntu
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            source ci/ubuntu.deps.sh
        - bash: |
            source ci/ubuntu.build.sh

      - job: AppImage
        displayName: AppImage
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            source ci/appimage.deps.sh
        - bash: |
            source ci/appimage.build.sh
        - bash: |
            source ci/appimage.deploy.sh


      - job: macOS
        displayName: macOS
        pool:
          vmImage: 'macos-10.15'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            source ci/osx-package.deps.sh
        - bash: |
            source ci/osx-package.build.sh
        - bash: |
            source ci/osx-package.deploy.sh

      - job: Tarball
        displayName: Tarball
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            source ci/tarball.build.sh
        - bash: |
            source ci/tarball.deploy.sh