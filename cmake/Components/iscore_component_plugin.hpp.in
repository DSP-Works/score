#pragma once
#include <score/plugins/qt_interfaces/FactoryInterface_QtInterface.hpp>
#include <score/plugins/qt_interfaces/PluginRequirements_QtInterface.hpp>
#include <QObject>
#include <utility>

#include <score/application/ApplicationContext.hpp>
#include <score/plugins/customfactory/FactoryInterface.hpp>

class ${PLUGIN_NAME} final:
        public QObject,
        public score::FactoryInterface_QtInterface,
        public score::Plugin_QtInterface
{
        Q_OBJECT
        Q_PLUGIN_METADATA(IID FactoryInterface_QtInterface_iid)
        Q_INTERFACES(
                score::FactoryInterface_QtInterface
                score::Plugin_QtInterface
                )
        SCORE_PLUGIN_METADATA(${SCORE_COMPONENT_Version}, "${SCORE_COMPONENT_Uuid}")
    public:
        ${PLUGIN_NAME}();
        virtual ~${PLUGIN_NAME}();

        std::vector<std::unique_ptr<score::InterfaceBase>> factories(
                const score::ApplicationContext& ctx,
                const score::InterfaceKey& factoryName) const override;
};
